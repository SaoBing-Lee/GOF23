
 单列模式的优点：
  -- 由于单例模式只生成一个实例，减少了系统性能开销，
     当一个对象的产生需要比较多的资源时，如读取配置、
     生产其他依赖对象时，则可以通过在应用启动时直接产生一个单例对象，然后永久驻留内存的方式来解决
  -- 单例模式可以在系统设置全局的访问点，优化共享资源访问，例如：可以设计一个单例类，负责所有数据表的映射处理


 常见的五种单列模式：
     主要：
     饿汉式（线程安全，调用效率高。但是，不能延时加载）
     懒汉式（线程安全，调用效率不高。但是，可以延时加载 ）
 其他：
     双重检测锁式（由于JVM底层内部模拟原因，偶尔会出现问题，不建议使用）
     静态内部类式（线程安全，调用效率高。但是，可以延时加载）
     ········
            问题：
             -- 反射可以破解以上几种实现方式（可以在构造器方法中手动抛出异常控制）
             -- 反序列化也可以破解以上几种实现方式
     ········
     枚举单例（线程安全，调用效率高。但是，不能延时加载）

